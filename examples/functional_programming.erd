// Unlocking the Functional Programming Paradigm


// -- misc. functions -- //
define int square(int x) {
    return x * x;
};

define int is_even(int x) {
    return x % 2 == 0;
};

define int sum(int x, int y) {
    return x + y;
};

// if size < new_size, all newly allocated
// slots will be initialized to 0
define int * realloc(int * arr, int size, int new_size) {

    int * new_arr = allocate(int, new_size);
    int i = 0;
    while(i < size) {
        new_arr[i] = arr[i];
        i = i + 1;
    };

    return new_arr;
};

// -- Classic Functional Programming Functions -- //

define int * map(int * arr, int size, <int> callable <int> func) {

    int i = 0;
    int * new_arr = allocate(int, size);
    while(i < size) {
        new_arr[i] = func(arr[i]);
        i = i + 1;
    };

    return new_arr;
};


define int * filter(int * arr, int size, <int> callable <int> cond) {

    int i = 0;
    int j = 0;

    int * new_arr = allocate(int, size);

    while(i < size) {
        if(cond(arr[i]) == 1) {
            new_arr[j] = arr[i];
            j = j + 1;
        };
        i = i + 1;
    };

    return realloc(new_arr, size, j);
};


define int reduce(int * arr, int size, <int> callable <int, int> func, int init) {

    int i = 0;

    while(i < size) {
        init = func(init, arr[i]);
        i = i + 1;
    };

    return init;
};



define <int> callable <int,int> get_calc_op(str name) {

    define int add(int x, int y) {
        return x + y;
    };

    define int multiply(int x, int y) {
        return x * y;
    };

    define int modulo(int x, int y) {
        return x % y;
    };
    

    if (strcmp(name, "modulo") == 1) {
        return modulo;
    };

    if (strcmp(name, "multiply") == 1) {
        return multiply;
    };

    if (strcmp(name, "add") == 1) {
        return add;
    };
    
    // Default
    return add;
};


define int main(){

    // Dummy data to plug-and-play with.
    int size = 10;
    int * arr = allocate(int, size);
    fill_array(arr, size);
    // print_array(arr, size); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

    arr = map(arr, size, square);
    // print_array(arr, size); // [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

    arr = filter(arr, size, is_even);
    // print_array(arr, 5); // [0, 4, 16, 36, 64]

    int result = reduce(arr, 5, sum, 0);
    // print(result); // 120

    <int> callable <int, int> func = get_calc_op("modulo");
    // print(func(10,3)); // 1
    return 0;
};

main();

// -- Misc Utility -- //

define int fill_array(int * arr, int size) {

    int i = 0;

    while(i < size) {
        arr[i] = i;
        i = i + 1;
    };

    return 0;
};

define int print_array(int * arr, int size) {

    int i = 0;

    while(i < size) {
        print(arr[i]);
        i = i + 1;
    };

    return 0;
};

define int string_length(str string) {
    int size = 0;
    while (string[size] != '\0') {
        size = size + 1;
    };
    return size;
};

define int strcmp(str a, str b) {

    int i = string_length(a);
    int j = string_length(b);

    if(i != j) {
        return 0;
    };

    int idx = 0;

    while(idx < i) {
        if(a[idx] != b[idx]) {
            return 0;
        };
        idx = idx + 1;
    };

    return 1;
};