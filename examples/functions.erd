// Set debug flag
int debug = 1;

define int agecheck(int age) {


    if(age >= 18) {

        if(debug == 1) {
            print("Is an adult");
        };

        return 1;
    };

    if(debug == 1) {
        print("Is not an adult");
    };

    return 0;
};
agecheck(17);

define int _add(int x, int y) {

    return x + y;
};

define int _sub(int x, int y) {

    return x - y;
};

// Declare a Callable
<int> callable <int, int> operation;

operation = _add;
print(operation(2,1)); // 3

operation = _sub;
print(operation(2,1)); // 1


<int> callable <int, int> * functions = allocate(<int> callable <int, int>, 2);

functions[0] = _add;
functions[1] = _sub;

// ... //

operation = functions[0];
print(operation(4,1)); // 5

operation = functions[1];
print(operation(4,1)); // 3

struct Operator = {
    <int> callable <int, int> op
};

struct Operator * my_operator = allocate(struct Operator, 1);
my_operator.op = functions[0];

// Can later be used like so:
operation = my_operator.op;
print(operation(5,1)); // 6



define int call_and_log(<int> callable <int, int> op, int x, int y) {
    int result = op(x,y);
    print("Operation resulted in:");
    print(result);
    return result;
};

call_and_log(_add, 5, 1); // Operation resulted in: 6



define int poly(int a) {
    return a * a;
};

callable p = poly;
float res = p(5.6); // 25.0
print(res);