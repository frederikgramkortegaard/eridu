
struct MyStruct = {
    int a,
    int * b,
    <int> callable <int *, int,  <int> callable <int> > func_ptr
};


struct MyStruct * data = allocate(struct MyStruct, 1);

data.b = allocate(int , 5);
int * arr = data.b;


print("Allocating data's stored array");
int size = 5;
int i = 0;
while (i < size) {
    
    arr[i] = i + 1;


    print(arr[i]);

    i = i + 1;
};

define int add1(int var) {
    return var+1;
};

define int map(int * arr, int size, <int> callable <int> func) {
    int i = 0;
    while (i < size) {
        print("Value of current array index:");
        print(arr[i]);
        arr[i] = func(arr[i]);
        i = i + 1;
    };
    return 0;
};

data.func_ptr = map;
print("Trying to assign function stored in structure to local callable");
<int> callable <int *, int, <int> callable <int>> call_ptr;
call_ptr = data.func_ptr;

print("Trying to call func stored in struct through local callable");
call_ptr(data.b, size, add1);



print("");
print("");


arr = data.b;
i = 0;


while ( i < size) {
    print("Printing value of struct array after using struct function");
    print(arr[i]);
    i = i + 1;
};